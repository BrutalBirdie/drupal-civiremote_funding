<?php

/*
 * Copyright (C) 2022 SYSTOPIA GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

use Drupal\civiremote_funding\File\FundingFileDownloadHook;
use Drupal\civiremote_funding\File\FundingFileManager;
use Drupal\civiremote_funding\ViewTranslator;
use Drupal\file\FileInterface;

function translateViews(): void {
  /** @var ViewTranslator $viewTranslator */
  $viewTranslator = \Drupal::service(ViewTranslator::class);
  $viewTranslator->translateViews('views.view.civiremote_funding_');
}

/**
 * Implements hook_rebuild().
 */
function civiremote_funding_rebuild(): void {
  // Provides a way to (re-)set the view translations. (Might not be necessary.)
  translateViews();
}

/**
 * Implements hook_batch_alter().
 *
 * @param array<string, mixed> $batch See \batch_set() for details.
 *
 * @see \batch_set()
 */
function civiremote_funding_batch_alter(array &$batch): void {
  // Translate views when language is added
  // @phpstan-ignore-next-line
  foreach ($batch['sets'] ?? [] as &$set) {
    // @phpstan-ignore-next-line
    if ('locale_translation_batch_fetch_finished' === ($set['finished'] ?? NULL)) {
      // @phpstan-ignore-next-line
      $batch['sets'][] = [
        'operations' => [],
        'finished' => 'translateViews',
        'results' => [],
        'elapsed' => 0,
      ];
      break;
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @return array<string, mixed>
 */
function civiremote_funding_theme(): array {
  return [
    'civiremote_funding_application_history' => [
      'template' => 'application/history',
      'render element' => 'civiremote_funding_application_history',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function civiremote_funding_file_predelete(FileInterface $file): void {
  /** @var \Drupal\civiremote_funding\File\FundingFileManager $fundingFileManager */
  $fundingFileManager = \Drupal::service(FundingFileManager::class);
  $fundingFileManager->onFilePreDelete($file);
}

/**
 * Implements hook_file_download().
 *
 * @return array<string, mixed>
 */
function civiremote_funding_file_download(string $uri): array {
  /** @var \Drupal\civiremote_funding\File\FundingFileDownloadHook $fundingFileDownloadHook */
  $fundingFileDownloadHook = \Drupal::service(FundingFileDownloadHook::class);

  return $fundingFileDownloadHook($uri);
}

/**
 * Implements hook_cron().
 */
function civiremote_funding_cron(): void {
  $cleanupDelay = \Drupal::config('civiremote_funding.settings')->get('file_cleanup_delay') ?? 0;
  if (!is_int($cleanupDelay) || 0 === $cleanupDelay) {
    return;
  }

  /** @var \Drupal\civiremote_funding\File\FundingFileManager $fundingFileManager */
  $fundingFileManager = \Drupal::service(FundingFileManager::class);
  foreach ($fundingFileManager->loadByLastAccessBefore(time() - $cleanupDelay) as $fundingFile) {
    $fundingFileManager->delete($fundingFile);
  }
}
